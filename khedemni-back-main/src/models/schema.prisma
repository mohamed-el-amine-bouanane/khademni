datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// enum Role {
//     admin
//     tasker
//     client
// }

model User {
    id          Int    @id @default(autoincrement())
    firstName   String
    lastName    String
    email       String @unique
    phoneNumber String
    password    String

    lastLogin DateTime?
    createdAt DateTime  @default(now())

    clients  Client[]
    taskers  Tasker[]
    reviews  Review[]
    Sent     Message[] @relation("Sender")
    Received Message[] @relation("Receiver")
} 

model Tasker {
    userId         Int     @unique
    User           User    @relation(fields: [userId], references: [id])
    amount         Float   @default(0)
    profilePicture String?
    description    String

    works         Work[]
    TaskerAddress TaskerAddress[]
    Task          Task[]

    @@id([userId])
}

model Client {
    userId Int  @unique
    User   User @relation(fields: [userId], references: [id])

    works Work[]

    @@id([userId])
}

model Admin {
    id       Int    @id @default(autoincrement())
    email    String @unique
    password String
}

model Task {
    id            Int         @id @default(autoincrement())
    description   String
    price         Float
    reviewsCount  Int
    ratingAverage Float
    taskImages    TaskImage[]

    taskerId   Int
    tasker     Tasker   @relation(fields: [taskerId], references: [userId])
    categoryId Int
    category   Category @relation(fields: [categoryId], references: [id])
}

model TaskImage {
    id     Int    @id @default(autoincrement())
    url    String
    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId Int
}

model Address {
    id            Int             @id @default(autoincrement())
    wilaya        String
    commune       String
    TaskerAddress TaskerAddress[]

    @@unique([wilaya, commune], name: "Unique_Wilaya_Commune")
}

model TaskerAddress {
    taskerId  Int
    addressId Int
    tasker    Tasker?  @relation(fields: [taskerId], references: [userId])
    address   Address? @relation(fields: [addressId], references: [id])

    @@id([taskerId, addressId])
}

model Review {
    id     Int @id @default(autoincrement())
    userId Int

    user    User?    @relation(fields: [userId], references: [id])
    rating  Int
    comment String
    date    DateTime @default(now())
}

model Category {
    id          Int    @id @default(autoincrement())
    name        String @unique
    description String
    works       Work[]
    Task        Task[]
}

model Work {
    id         Int          @id @default(autoincrement())
    client     Client       @relation(fields: [clientId], references: [userId])
    tasker     Tasker       @relation(fields: [taskerId], references: [userId])
    category   Category     @relation(fields: [categoryId], references: [id])
    clientId   Int
    taskerId   Int
    categoryId Int
    status     Status       @default(created)
    Message    Message[]
    WorkReview WorkReview[]
}

model Message {
    id       Int     @id @default(autoincrement())
    from     Int
    to       Int
    content  String
    seen     Boolean @default(false)
    workId   Int
    work     Work    @relation(fields: [workId], references: [id], onDelete: Cascade)
    sender   User    @relation("Sender", fields: [from], references: [id])
    receiver User    @relation("Receiver", fields: [to], references: [id])
}

model WorkReview {
    id      Int    @id @default(autoincrement())
    work    Work   @relation(fields: [workId], references: [id], onDelete: Cascade)
    workId  Int
    rating  Int
    comment String
    date    DateTime @default(now())
}

enum Status {
    created
    started
    canceled
    finished
    approved
}
